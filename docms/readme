# Astea Engine

This goes over the the Astea engine we built for our documentation. It currently generates targets for required by our documentation engine, hopefully not for long. There are two requirements:

- empty state: so the engine knows that it needs to go by the default condition and generate everything it can
- mix and match: in this case the user can manually type out what they want here

There is a programatic way to generate documentation a lot like how JSX works. User will give its inputs through the `<!-- astea:(namepath):(command [ARGS]) -->`, a very simple doclang.

Every file should start with the instructure for default <!-- astea::config.default -->, this tells the astea to setup a default

```
<!-- astea:Operator --> : this would put in "Operator" object here
<!-- astea:Operator.remote_init --> : this would put in "Operator.remote_init" object here
<!-- astea:Operator:include '^__' --> : this would put all the objects in "Operator" including those that start with "__"

You can ignore writing the namepath as well and only give commands
<!-- astea::include '^__' --> : this would add all the objects that also start with the z
```

- User can either give `namepath` or `command` but not both.
- `namepath`: will be what we send to `tea.find(namepath)` and get back the index record
- `command` is one of
  - 
